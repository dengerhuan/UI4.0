import {Http} from '../../../core/services/http.client';


export class Customer {


  private _tiles: any;

  constructor(private http: Http, private options) {

    this._tiles = new L.GridLayer();
    this._tiles.createTile = (coords) => {

      /**
       * 创建canvas节点
       */
      const tile = L.DomUtil.create('canvas', 'leaflet-tile');
      const ctx = tile.getContext('2d');
      this.getdata(coords, ctx);
      return tile;
    };
  }


  getdata(coords, ctx) {

    const {x, y, z} = coords;
    const path = `/api/vectormap/${x}/${y}/${z}`;
    this.http.get(path).catch(res => res).subscribe(geojson => {


      console.log(geojson)
      const tile = geojsonvt(geojson, this.options);

      const curtile = tile.getTile(z, x, y);
      console.log(curtile)
      this.getTileUrlData(curtile, ctx);
    });

  }

  getTileUrlData(data, ctx) {
    const features = data ? data.features : [];
    for (const feature of  features) {
      this.drawFeature(ctx, feature);
    }

  }


  drawFeature(ctx, feature) {
    const {type, geometry} = feature;
    ctx.beginPath();

    if (this.options.style) {
      this.setStyle(ctx, this.options.style);
    }
    console.log(this.options)


    switch (type) {
      case 1: {
        geometry.forEach(p => {
          ctx.arc(p[0] / 16.0, p[1] / 16.0, 2, 0, Math.PI * 2, true);
        });
        break;
      }
      default : {
        geometry.forEach(poly => {
          poly.forEach((p, index) => {
            if (index) {
              ctx.lineTo(p[0] / 16.0, p[1] / 16.0);
            } else {
              ctx.moveTo(p[0] / 16.0, p[1] / 16.0);
            }
          });
        });
      }
    }

    if (type === 3) {
      ctx.fill(this.options.style.fillRule || 'evenodd');
    }
    ctx.stroke();
  }

  setStyle(ctx, style) {
    const {stroke = true, fill = true, color, opacity} = style;


    const colors = ['#F0207F', '#03f', '#F9FF38']

    if (stroke) {
      ctx.lineWidth = style.weight || 5;
      // color = this.setOpacity(color, opacity);
      ctx.strokeStyle = color;

    } else {
      ctx.lineWidth = 0;
      ctx.strokeStyle = {};
    }
    if (fill) {
      ctx.fillStyle = style.fillColor || '#03f';
    } else {
      ctx.fillStyle = {};
    }
  }

  get tiles(): any {
    return this._tiles;
  }


  addTo(map) {
    this._tiles.addTo(map);
  }
}
